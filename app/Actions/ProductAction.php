<?php

namespace App\Actions;

use App\Http\Resources\ProductResource;
use App\Models\ProductModel;
use Genocide\Radiocrud\Services\ActionService\ActionService;

class ProductAction extends ActionService
{
    public function __construct()
    {
        $this
            ->setModel(ProductModel::class)
            ->setResource(ProductResource::class)
            ->setValidationRules([
                'store' => [
                    'laravel' => [
                        'category_id' => ['required', 'integer', 'between:1,' . str_repeat('9', 18)],
                        'title' => ['required', 'string', 'max:150'],
                        'description' => ['string', 'max:2500'],
                        'image' => ['required', 'file', 'mimes:png,jpg,jpeg,svg', 'max:5000']
                    ],
                    'casts' => [
                        'image' => ['file']
                    ]
                ],
                'update' => [
                    'category_id' => ['integer', 'between:1,' . str_repeat('9', 18)],
                    'title' => ['string', 'max:150'],
                    'description' => ['nullable', 'string', 'max:2500'],
                    'image' => ['string', 'max:150'],
                    'date' => ['date_format:Y-m-d']
                ],
                'getQuery' => [
                    'category_id' => ['string', 'max:20'],
                    'from_date' => ['date_format:Y-m-d'],
                    'to_date' => ['date_format:Y-m-d'],
                ]
            ])
            ->setCasts([
                'from_date' => ['jalali_to_gregorian:Y-m-d'],
                'to_date' => ['jalali_to_gregorian:Y-m-d'],
            ])
            ->setQueryToEloquentClosures([
                'category_id' => function (&$eloquent, $query)
                {
                    $eloquent = $eloquent->where('category_id', $query['category_id']);
                },
                'from_date' => function (&$eloquent, $query)
                {
                    $eloquent = $eloquent->whereDate('created_at', '>=', $query['from_date']);
                },
                'to_date' => function (&$eloquent, $query)
                {
                    $eloquent = $eloquent->whereDate('created_at', '<=', $query['to_date']);
                }
            ]);

        parent::__construct();
    }

    public function delete(callable $deleting = null): mixed
    {
        $deleting = function ($eloquent) use ($deleting)
        {
            foreach ($eloquent->get() AS $product)
            {
                if (is_file($product->image))
                {
                    unlink($product->image);
                }
            }

            if (is_callable($deleting))
            {
                $deleting($eloquent);
            }
        };
        return parent::delete($deleting);
    }

    public function update(array $updateData, callable $updating = null): bool|int
    {
        $updating = function ($eloquent, $updateData){
            foreach ($eloquent->get() AS $product)
            {
                if (isset($updateData['image']) && is_file($product->image))
                {
                    unlink($product->image);
                }
            }
        };
        return parent::update($updateData, $updating); // TODO: Change the autogenerated stub
    }
}
